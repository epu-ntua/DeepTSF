stages:
  - build-app
  - deploy-dev
  - deploy-stage
  - deploy-prod

variables:
  HARBOR_IMAGE_BACKEND: "${HARBOR_HOST}/iccs/deeptsf-backend:latest"
  HARBOR_IMAGE_DAGSTER: "${HARBOR_HOST}/iccs/deeptsf-dagster:latest"
  HARBOR_IMAGE_WORKER: "${HARBOR_HOST}/iccs/deeptsf-worker:latest"
  HARBOR_IMAGE_PGDB: "${HARBOR_HOST}/iccs/deeptsf-pgdb:latest"
  HARBOR_IMAGE_REDIS: "${HARBOR_HOST}/iccs/deeptsf-redis:latest"


build-app:
  stage: build-app
  image: harbor.aiodp.ai/cvm-public/ci-tools 
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker info
  script:
    ###BUILDING###
    - echo "Building Docker image for deeptsf backend..."
    - docker build --target backend -f deeptsf_backend/Dockerfile_keycloak -t ${HARBOR_IMAGE_BACKEND} ./deeptsf_backend

    - echo "Building Docker image for dagster..."
    - docker build --target backend -f deeptsf_backend/Dockerfile_keycloak -t ${HARBOR_IMAGE_DAGSTER} ./deeptsf_backend

    - echo "Building Docker image for worker..."
    - docker build --target celery-worker -f deeptsf_backend/Dockerfile_keycloak -t ${HARBOR_IMAGE_WORKER} ./deeptsf_backend

    - echo "Pulling pgdb image..."
    - docker pull inergy2020iccs/pgdb:16.2
    - docker tag inergy2020iccs/pgdb:16.2 ${HARBOR_IMAGE_PGDB}

    - echo "Pulling redis image..."
    - docker pull redis:7-alpine
    - docker tag  redis:7-alpine  ${HARBOR_IMAGE_REDIS}

    ###PUSHING###
    - echo "Logging into Harbor using Robot Account..."
    - echo ${HARBOR_ROBOT_PASSWORD} | docker login ${HARBOR_HOST} -u ${HARBOR_ROBOT_USER} --password-stdin

    - echo "Pushing Backend Docker image to Harbor..."
    - docker push ${HARBOR_IMAGE_BACKEND}

    - echo "Pushing Dagster Docker image to Harbor..."
    - docker push ${HARBOR_IMAGE_DAGSTER}

    - echo "Pushing worker Docker image to Harbor..."
    - docker push ${HARBOR_IMAGE_WORKER}

    - echo "Pushing pgdb Docker image to Harbor..."
    - docker push ${HARBOR_IMAGE_PGDB}

    - echo "Pushing redis Docker image to Harbor..."
    - docker push ${HARBOR_IMAGE_REDIS}

  only:
    - dagster_intergration
  tags:
    - shared

# Deploy the app to dev using Helm and Rancher
deploy-dev:
  stage: deploy-dev
  image: harbor.aiodp.ai/cvm-public/ci-tools 
  dependencies:
    - build-app
  before_script:
    - echo "Secure the KUBECONFIG file"
    - chmod 600 ${KUBECONFIG}
  script:
    - echo "Checking Kubernetes cluster connectivity..."
    - kubectl get nodes
    - echo "Deploying to Rancher using Helm..."
    - helm upgrade --install deeptsf-backend ./helm-chart -f helm-chart/values.yaml --namespace iccs --set storageClassName=longhorn --set registry.password=${HARBOR_ROBOT_PASSWORD} --set registry.username=${HARBOR_ROBOT_USER} --set registry.registry=${HARBOR_HOST} --set env.host=.dev.aiodp.ai --set env.marketplace=platform.aiodp.ai --set env.AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --set env.AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --set env.MINIO_CLIENT_URL=${MINIO_CLIENT_URL} --set env.MINIO_SSL=${MINIO_SSL} --set env.MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} --set env.MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL} --set env.MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} --set env.MINIO_SECRET_KEY=${MINIO_SECRET_KEY} --set env.USE_AUTH=${USE_AUTH} --set env.KEYCLOAK_ID=${KEYCLOAK_ID} --set env.KEYCLOAK_SECRET=${KEYCLOAK_SECRET} --set env.TOKEN_ISSUER_URL=${TOKEN_ISSUER_URL} --set env.PYTHONUNBUFFERED=${PYTHONUNBUFFERED} --set env.CELERYD_HIJACK_ROOT_LOGGER=${CELERYD_HIJACK_ROOT_LOGGER} --set env.CELERY_BROKER_URL=${CELERY_BROKER_URL} --set env.CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND} --set env.POSTGRES_USER=${POSTGRES_USER} --set env.POSTGRES_DATABASE=${POSTGRES_DATABASE} --set env.POSTGRES_PASSWORD=${POSTGRES_PASSWORD} --set commitHash=${CI_COMMIT_SHA}

  only:
    - master
  tags:
    - shared
  environment:
    name: dev

# Deploy the app to stage using Helm and Rancher
deploy-stage:
  stage: deploy-stage
  image: harbor.aiodp.ai/cvm-public/ci-tools 
  dependencies:
    - build-app
  before_script:
    - echo "Secure the KUBECONFIG file"
    - chmod 600 ${KUBECONFIG_STAGE}
    - export KUBECONFIG=${KUBECONFIG_STAGE}
  script:
    - echo "Deploying to Rancher using Helm..."
    - helm upgrade --install deeptsf-backend ./helm-chart -f helm-chart/values.yaml --namespace iccs --set storageClassName=longhorn --set registry.password=${HARBOR_ROBOT_PASSWORD} --set registry.username=${HARBOR_ROBOT_USER} --set registry.registry=${HARBOR_HOST} --set env.host=.stage.aiodp.ai --set env.marketplace=platform.aiodp.ai --set env.AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --set env.AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --set env.MINIO_CLIENT_URL=${MINIO_CLIENT_URL} --set env.MINIO_SSL=${MINIO_SSL} --set env.MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} --set env.MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL} --set env.MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} --set env.MINIO_SECRET_KEY=${MINIO_SECRET_KEY} --set env.USE_AUTH=${USE_AUTH} --set env.KEYCLOAK_ID=${KEYCLOAK_ID} --set env.KEYCLOAK_SECRET=${KEYCLOAK_SECRET} --set env.TOKEN_ISSUER_URL=${TOKEN_ISSUER_URL} --set env.PYTHONUNBUFFERED=${PYTHONUNBUFFERED} --set env.CELERYD_HIJACK_ROOT_LOGGER=${CELERYD_HIJACK_ROOT_LOGGER} --set env.CELERY_BROKER_URL=${CELERY_BROKER_URL} --set env.CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND} --set env.POSTGRES_USER=${POSTGRES_USER} --set env.POSTGRES_DATABASE=${POSTGRES_DATABASE} --set env.POSTGRES_PASSWORD=${POSTGRES_PASSWORD} --set commitHash=${CI_COMMIT_SHA}
  only:
    - dagster_intergration
  tags:
    - shared
  environment:
    name: stage

  # Deploy the app to prod using Helm and Rancher
deploy-prod:
  stage: deploy-prod
  image: harbor.aiodp.ai/cvm-public/ci-tools 
  dependencies:
    - build-app
  before_script:
    - echo "Secure the KUBECONFIG file"
    - chmod 600 ${KUBECONFIG_PROD}
    - export KUBECONFIG=${KUBECONFIG_PROD}
  script:
    - echo "Deploying to Rancher using Helm..."
    - helm upgrade --install deeptsf-backend ./helm-chart -f helm-chart/values.yaml --namespace iccs --set storageClassName=longhorn --set registry.password=${HARBOR_ROBOT_PASSWORD} --set registry.username=${HARBOR_ROBOT_USER} --set registry.registry=${HARBOR_HOST} --set env.host=.aiodp.ai --set env.marketplace=platform.aiodp.ai --set env.AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --set env.AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --set env.MINIO_CLIENT_URL=${MINIO_CLIENT_URL} --set env.MINIO_SSL=${MINIO_SSL} --set env.MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} --set env.MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL} --set env.MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY} --set env.MINIO_SECRET_KEY=${MINIO_SECRET_KEY} --set env.USE_AUTH=${USE_AUTH} --set env.KEYCLOAK_ID=${KEYCLOAK_ID} --set env.KEYCLOAK_SECRET=${KEYCLOAK_SECRET} --set env.TOKEN_ISSUER_URL=${TOKEN_ISSUER_URL} --set env.PYTHONUNBUFFERED=${PYTHONUNBUFFERED} --set env.CELERYD_HIJACK_ROOT_LOGGER=${CELERYD_HIJACK_ROOT_LOGGER} --set env.CELERY_BROKER_URL=${CELERY_BROKER_URL} --set env.CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND} --set env.POSTGRES_USER=${POSTGRES_USER} --set env.POSTGRES_DATABASE=${POSTGRES_DATABASE} --set env.POSTGRES_PASSWORD=${POSTGRES_PASSWORD} --set commitHash=${CI_COMMIT_SHA}
  only:
    - mastermaster
  tags:
    - shared
  environment:
    name: prod